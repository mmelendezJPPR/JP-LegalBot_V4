#!/usr/bin/env python3
"""
Script de verificaci√≥n final para deployment en Render
Ejecuta todas las pruebas cr√≠ticas antes del deploy
"""

import os
import sys
import sqlite3
import requests
from pathlib import Path

def check_files():
    """Verificar archivos cr√≠ticos"""
    required_files = [
        'app.py',
        'Dockerfile',
        'Procfile',
        'requirements.txt',
        'database/conversaciones.db',
        'database/hybrid_knowledge.db',
        'database/Usuarios.db'
    ]

    print('üìÅ VERIFICANDO ARCHIVOS:')
    all_ok = True
    for file in required_files:
        if os.path.exists(file):
            print(f'  ‚úÖ {file}')
        else:
            print(f'  ‚ùå {file} - FALTANTE')
            all_ok = False
    return all_ok

def check_databases():
    """Verificar bases de datos"""
    print('\nüóÑÔ∏è VERIFICANDO BASES DE DATOS:')
    all_ok = True

    # Verificar tablas
    dbs = {
        'conversaciones.db': ['conversaciones', 'metricas_rendimiento', 'aprendizaje_sistema'],
        'hybrid_knowledge.db': ['fts_chunks', 'conversation_messages', 'performance_metrics'],
        'Usuarios.db': ['usuarios']
    }

    for db_name, tables in dbs.items():
        db_path = f'database/{db_name}'
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
            existing_tables = [row[0] for row in cur.fetchall()]
            conn.close()

            for table in tables:
                if table in existing_tables:
                    print(f'  ‚úÖ {db_name}:{table}')
                else:
                    print(f'  ‚ùå {db_name}:{table} - FALTANTE')
                    all_ok = False
        except Exception as e:
            print(f'  ‚ùå {db_name} - ERROR: {e}')
            all_ok = False

    return all_ok

def check_environment():
    """Verificar variables de entorno cr√≠ticas"""
    print('\nüîß VERIFICANDO VARIABLES DE ENTORNO:')

    # En desarrollo local, las variables pueden venir del .env
    # En producci√≥n (Render), deben estar configuradas en el dashboard
    from dotenv import load_dotenv
    load_dotenv()

    required_vars = [
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME',
        'SECRET_KEY'
    ]

    all_ok = True
    for var in required_vars:
        value = os.getenv(var)
        if value:
            if var == 'AZURE_OPENAI_KEY':
                # Mostrar solo que existe
                print(f'  ‚úÖ {var} (configurado)')
            else:
                print(f'  ‚úÖ {var} = {value}')
        else:
            print(f'  ‚ö†Ô∏è  {var} - NO CONFIGURADO (configurar en Render dashboard)')
            # No marcar como error en desarrollo local
            if os.getenv('RENDER'):  # Solo fallar si estamos en Render
                all_ok = False

    return all_ok

def check_imports():
    """Verificar imports cr√≠ticos"""
    print('\nüì¶ VERIFICANDO IMPORTS:')
    all_ok = True

    try:
        from ai_system.retrieve import HybridRetriever
        print('  ‚úÖ HybridRetriever importado')
    except Exception as e:
        print(f'  ‚ùå HybridRetriever error: {e}')
        all_ok = False

    try:
        from ai_system.answer import AnswerEngine
        print('  ‚úÖ AnswerEngine importado')
    except Exception as e:
        print(f'  ‚ùå AnswerEngine error: {e}')
        all_ok = False

    try:
        from core.auth import login_user
        print('  ‚úÖ Sistema de autenticaci√≥n importado')
    except Exception as e:
        print(f'  ‚ùå Sistema de autenticaci√≥n error: {e}')
        all_ok = False

    return all_ok

def check_app_start():
    """Verificar que la app puede iniciar (simulaci√≥n)"""
    print('\nüöÄ VERIFICANDO INICIO DE APLICACI√ìN:')

    try:
        # Simular configuraci√≥n de producci√≥n
        os.environ['FLASK_ENV'] = 'production'
        os.environ['FLASK_DEBUG'] = 'false'

        # Intentar importar la app (sin ejecutarla)
        sys.path.insert(0, '.')
        import app
        print('  ‚úÖ Aplicaci√≥n importada correctamente')
        return True
    except Exception as e:
        print(f'  ‚ùå Error importando aplicaci√≥n: {e}')
        return False

def main():
    """Funci√≥n principal"""
    print('üîç VERIFICACI√ìN FINAL PARA RENDER DEPLOYMENT')
    print('=' * 60)

    checks = [
        ('Archivos', check_files),
        ('Bases de datos', check_databases),
        ('Variables de entorno', check_environment),
        ('Imports', check_imports),
        ('Inicio de aplicaci√≥n', check_app_start)
    ]

    results = []
    for name, check_func in checks:
        print(f'\nüîç Ejecutando verificaci√≥n: {name}')
        result = check_func()
        results.append((name, result))
        status = '‚úÖ PAS√ì' if result else '‚ùå FALL√ì'
        print(f'üìä Resultado {name}: {status}')

    print('\n' + '=' * 60)
    print('üìä RESUMEN FINAL:')

    all_passed = True
    for name, result in results:
        status = '‚úÖ' if result else '‚ùå'
        print(f'  {status} {name}')
        if not result:
            all_passed = False

    print('\n' + '=' * 60)
    if all_passed:
        print('üéâ ¬°TODO LISTO PARA RENDER!')
        print('üöÄ Puedes proceder con el deployment en render.com')
        print('\nüìã Checklist final:')
        print('  ‚úÖ Repositorio: mmelendezJPPR/JP-LegalBot_V4')
        print('  ‚úÖ Runtime: Docker')
        print('  ‚úÖ Variables de entorno configuradas')
        print('  ‚úÖ Health check: /health')
        print('  ‚úÖ Bases de datos inicializadas')
    else:
        print('‚ùå HAY PROBLEMAS QUE DEBEN SOLUCIONARSE ANTES DEL DEPLOYMENT')
        print('üîß Revisa los errores arriba y corr√≠gelos')

    return 0 if all_passed else 1

if __name__ == '__main__':
    sys.exit(main())